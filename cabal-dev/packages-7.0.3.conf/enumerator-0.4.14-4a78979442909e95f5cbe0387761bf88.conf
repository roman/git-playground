name: enumerator
version: 0.4.14
id: enumerator-0.4.14-4a78979442909e95f5cbe0387761bf88
license: MIT
copyright: Copyright (c) John Millikin 2010-2011
maintainer: jmillikin@gmail.com
stability: experimental
homepage: https://john-millikin.com/software/enumerator/
package-url:
description: Typical buffer&#x2013;based incremental I/O is based around a single loop,
             which reads data from some source (such as a socket or file), transforms
             it, and generates one or more outputs (such as a line count, HTTP
             responses, or modified file). Although efficient and safe, these loops are
             all single&#x2013;purpose; it is difficult or impossible to compose
             buffer&#x2013;based processing loops.
             .
             Haskell&#x2019;s concept of &#x201C;lazy I/O&#x201D; allows pure code to
             operate on data from an external source. However, lazy I/O has several
             shortcomings. Most notably, resources such as memory and file handles can
             be retained for arbitrarily long periods of time, causing unpredictable
             performance and error conditions.
             .
             Enumerators are an efficient, predictable, and safe alternative to lazy
             I/O. Discovered by Oleg Kiselyov, they allow large datasets to be processed
             in near&#x2013;constant space by pure code. Although somewhat more complex
             to write, using enumerators instead of lazy I/O produces more correct
             programs.
             .
             This library contains an enumerator implementation for Haskell, designed to
             be both simple and efficient. Three core types are defined, along with
             numerous helper functions:
             .
             * /Iteratee/: Data sinks, analogous to left folds. Iteratees consume
             a sequence of /input/ values, and generate a single /output/ value.
             Many iteratees are designed to perform side effects (such as printing to
             @stdout@), so they can also be used as monad transformers.
             .
             * /Enumerator/: Data sources, which generate input sequences. Typical
             enumerators read from a file handle, socket, random number generator, or
             other external stream. To operate, enumerators are passed an iteratee, and
             provide that iteratee with input until either the iteratee has completed its
             computation, or EOF.
             .
             * /Enumeratee/: Data transformers, which operate as both enumerators and
             iteratees. Enumeratees read from an /outer/ enumerator, and provide the
             transformed data to an /inner/ iteratee.
category: Data, Enumerator
author: John Millikin <jmillikin@gmail.com>
exposed: True
exposed-modules: Data.Enumerator Data.Enumerator.Binary
                 Data.Enumerator.Text Data.Enumerator.List Data.Enumerator.IO
hidden-modules: Data.Enumerator.Util
import-dirs: /vagrant/haskell/Git/cabal-dev//lib/enumerator-0.4.14/ghc-7.0.3
library-dirs: /vagrant/haskell/Git/cabal-dev//lib/enumerator-0.4.14/ghc-7.0.3
hs-libraries: HSenumerator-0.4.14
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.3.1.0-91c3839608ff4d3ec95f734c5ae4f31c
         bytestring-0.9.1.10-6aa1efbfa95d1689fc03d61e7c4b27c4
         containers-0.4.0.0-b4885363abca642443ccd842502a3b7e
         text-0.11.1.5-2a5b4895e7289f5ece77966b17683619
         transformers-0.2.2.0-4bbbfde1fb5c4eb17cdb1963dda698f3
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /vagrant/haskell/Git/cabal-dev//share/doc/enumerator-0.4.14/html/enumerator.haddock
haddock-html: /vagrant/haskell/Git/cabal-dev//share/doc/enumerator-0.4.14/html
